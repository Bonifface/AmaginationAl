import React, { useState, useEffect } from "react";
import { styles } from "./Home.styles.ts";
import { FormField } from "../FormField/FormField.tsx";
import { Loader } from "../general/Loader.tsx";
import { Cards } from "./Cards/Cards.tsx";
import { url } from "../../../config/constant.ts";
import {
  useAppDispatch,
  useAppSelector,
} from "../../../../../../../table-test/src/store/reduxHooks.ts";

export const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState <any>(null);
  const posts = useAppSelector((state) => state.posts);
  const dispatch = useAppDispatch();
  const [searchText, setSearchText] = useState("");
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);

  const classes = styles();
  console.log(allPosts);
  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch(`${url}/post`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      console.log(response);
      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    searchTimeout && clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      allPosts &&
        setTimeout(() => {
          const searchResult = allPosts.filter(
            (item:any) =>
              item.name.toLowerCase().includes(searchText.toLowerCase()) ||
              item.prompt.toLowerCase().includes(searchText.toLowerCase()),
          );
          setSearchedResults(searchResult);
        }, 500),
    );
  };

  return (
    <div css={classes.container}>
      <h1 css={classes.title}>The Community Showcase</h1>
      <p css={classes.subTitle}>
        Browse through a collection of imaginative and visually stunning images
        generated by DALL-E AI
      </p>
      <FormField
        labelName="Search posts"
        type="text"
        name="text"
        placeholder="Search image"
        value={searchText}
        onChange={handleSearchChange}
      />
      <div>
        {loading ? (
          <Loader />
        ) : (
          <>
            {searchText && (
              <h1 css={classes.titleSearch}>
                Showing result for{" "}
                <span css={classes.subtitleSearch}>{searchText}</span>
              </h1>
            )}
          </>
        )}
        <div>
          {searchText ? (
            <Cards data={searchedResults} title="No Search Results Found" />
          ) : (
            <Cards data={allPosts} title="No Posts Yet" />
          )}
        </div>
      </div>
    </div>
  );
};
